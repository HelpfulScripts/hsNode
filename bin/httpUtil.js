"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require('http');
const crypto_1 = require("crypto");
const log_1 = require("./log");
const log = new log_1.Log('httpUtil');
class Digest {
    constructor(username, password) {
        this.nc = 0;
        this.username = username;
        this.password = password;
    }
    updateNC() {
        let max = 99999999;
        let padding = new Array(8).join('0') + '';
        this.nc = (this.nc > max ? 1 : this.nc + 1);
        let nc = this.nc + '';
        return padding.substr(0, 8 - nc.length) + nc;
    }
    generateCNONCE(qop) {
        let cnonce;
        let nc;
        if (typeof qop === 'string') {
            let cnonceHash = crypto_1.createHash('md5');
            cnonceHash.update(Math.random().toString(36));
            cnonce = cnonceHash.digest('hex').substr(0, 16);
            nc = this.updateNC();
        }
        return { cnonce: cnonce, nc: nc };
    }
    testDigestAuth(options, data, response) {
        log.info(`received www-authenticate request for ${options.host}`);
        let challenge = parseDigestResponse(response.headers['www-authenticate']);
        let ha1 = crypto_1.createHash('md5');
        let _str = `${this.username}:${challenge.realm}:${this.password}`;
        ha1.update(_str);
        let ha2 = crypto_1.createHash('md5');
        _str = `${options.method}:${options.path}`;
        ha2.update(_str);
        let { nc, cnonce } = this.generateCNONCE(challenge.qop);
        let hash = crypto_1.createHash('md5');
        _str = `${ha1.digest('hex')}:${challenge.nonce}:${nc}:${cnonce}:${challenge.qop}:${ha2.digest('hex')}`;
        hash.update(_str);
        let authParams = {
            realm: challenge.realm,
            username: this.username,
            uri: options.path,
            qop: challenge.qop,
            nonce: challenge.nonce,
            algorithm: "MD5",
            response: hash.digest('hex')
        };
        authParams = omitNull(authParams);
        if (cnonce) {
            authParams.nc = nc;
            authParams.cnonce = cnonce;
        }
        options.headers.Authorization = compileParams(authParams);
        return requestOptions(options);
    }
}
exports.Digest = Digest;
function omitNull(data) {
    let newObject = {};
    Object.keys(data).forEach((k) => {
        if (data[k] !== null && data[k] !== undefined) {
            newObject[k] = data[k];
        }
    });
    return newObject;
}
function compileParams(params) {
    let parts = [];
    for (let i in params) {
        if (typeof params[i] !== 'function') {
            let param = i + '=' + (putDoubleQuotes(i) ? `"${params[i]}"` : params[i]);
            parts.push(param);
        }
    }
    return 'Digest ' + parts.join(',');
}
function putDoubleQuotes(entry) {
    return ['qop', 'nc'].indexOf(entry) < 0;
}
function parseDigestResponse(digestHeader) {
    digestHeader = digestHeader.split('Digest ')[1];
    const params = {};
    digestHeader.split(',').forEach((part) => {
        const kv = part.split('=').map((v) => v.trim());
        params[kv[0]] = kv[1].replace(/\"/g, '');
    });
    return params;
}
function isBinary(contentType) {
    const binary = {
        'text/html': false,
        'text/plain': false,
        'image/jpeg': true,
        'image/png': true
    };
    const result = binary[contentType];
    return (result === undefined) ? false : result;
}
function getAttributes(tag, result) {
    let fields = tag.split(/(?=([^"]*"[^"]*")*[^"]*$)\s+/g);
    tag = fields[0].trim();
    result[tag] = {};
    if (fields.length > 0) {
        for (let i = 1; i < fields.length; i++) {
            let attrs = fields[i].split('=');
            result[tag].attrs = result[tag].attrs || {};
            result[tag].attrs[attrs[0].trim()] = attrs[1].split('"')[1].trim();
        }
    }
    return tag;
}
function request(url, user, referer, postData) {
    let options = {
        method: postData ? 'POST' : 'GET',
        protocol: url.protocol,
        host: url.host,
        hostname: url.hostname,
        port: url.port,
        pathname: url.pathname,
        path: url.pathname + (url.search || ''),
        headers: { 'User-Agent': 'helpful scripts' },
    };
    if (referer) {
        options.headers.referer = referer;
    }
    return requestOptions(options, user, postData);
}
exports.request = request;
function requestOptions(options, user, postData) {
    let auth = (options.headers && options.headers.Authorization);
    log.debug(`requesting ${log.inspect(options, 4)}`);
    return new Promise((resolve, reject) => {
        let data = '';
        log.debug(`sending request ${auth ? 'with authorization ' : ''}for ${options.protocol}//${options.host}:${options.port}${options.path}`);
        const req = http.request(options, (res) => {
            const encoding = isBinary(res.headers['content-type']) ? 'binary' : 'utf8';
            log.debug(`receiving...${res.headers['content-type']} => ${encoding}`);
            res.setEncoding(encoding);
            res.on('data', (chunk) => { data += chunk; });
            res.on('end', () => { log.debug(`received ${encoding}`); resolve({ data: data, response: res }); });
        });
        req.on('error', (e) => reject(e));
        if (postData !== undefined) {
            req.write(postData);
        }
        req.end();
    })
        .then((res) => {
        if (user && res.response.headers['www-authenticate']) {
            return user.testDigestAuth(options, res.data, res.response);
        }
        else {
            return res;
        }
    });
}
function xml2json(xml) {
    let result;
    while (xml.length > 0) {
        let tag = xml.match(/<.*?>/);
        if (tag && tag.length > 0) {
            tag = tag[0].substring(1, tag[0].length - 1);
            result = result || {};
            tag = getAttributes(tag, result);
            let start = xml.indexOf(`<${tag}`);
            let end = xml.indexOf(`</${tag}>`);
            if (end > 0) {
                let content = xml.substring(start + tag.length + 2, end).trim();
                result[tag] = this.xml2json(content);
                xml = xml.substring(end + tag.length + 3).trim();
            }
            else {
                xml = xml.substring(xml.indexOf('>') + 1).trim();
            }
        }
        else {
            result = xml.slice(0);
            xml = '';
        }
    }
    return result;
}
exports.xml2json = xml2json;
//# sourceMappingURL=data:application/json;base64,