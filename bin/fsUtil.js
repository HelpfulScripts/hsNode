"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const path = require("path");
function stat(thePath) {
    return Promise.resolve(thePath)
        .then(realPath)
        .then(thePath => new Promise((resolve, reject) => {
        fs.stat(thePath, (err, stats) => {
            if (err) {
                reject(err);
            }
            else {
                stats.path = thePath;
                resolve(stats);
            }
        });
    }));
}
function lstat(thePath) {
    return Promise.resolve(thePath)
        .then(path.normalize)
        .then(thePath => new Promise((resolve, reject) => {
        fs.lstat(thePath, (err, stats) => {
            if (err) {
                reject(err);
            }
            else {
                stats.path = thePath;
                resolve(stats);
            }
        });
    }));
}
function error(err) {
    const msg = `*** error in fsUtil: ${err}, stack:\n${err.stack}`;
    throw new Error(msg);
}
function realPath(thePath) {
    return new Promise((resolve, reject) => {
        fs.realpath(thePath, (err, resolvedPath) => err ? reject(err) : resolve(resolvedPath));
    })
        .catch(error);
}
exports.realPath = realPath;
function pathExists(thePath) {
    return new Promise((resolve) => {
        stat(thePath).then((stats) => resolve(true)).catch(() => resolve(false));
    });
}
exports.pathExists = pathExists;
function isFile(thePath) {
    return new Promise((resolve) => {
        stat(thePath).then((stats) => resolve(stats.isFile())).catch(() => resolve(false));
    });
}
exports.isFile = isFile;
function isDirectory(thePath) {
    return new Promise((resolve) => {
        stat(thePath).then((stats) => resolve(stats.isDirectory())).catch(() => resolve(false));
    });
}
exports.isDirectory = isDirectory;
function isLink(thePath) {
    return new Promise((resolve) => {
        lstat(thePath).then((stats) => resolve(stats.isSymbolicLink())).catch(() => resolve(false));
    });
}
exports.isLink = isLink;
function readDir(thePath) {
    return Promise.resolve(thePath)
        .then(realPath)
        .then(thePath => new Promise((resolve, reject) => {
        fs.readdir(thePath, (err, files) => {
            if (err) {
                reject(err);
            }
            else {
                files.path = thePath;
                resolve(files);
            }
        });
    }))
        .catch(error);
}
exports.readDir = readDir;
function readFile(thePath, isText = true) {
    return new Promise((resolve, reject) => {
        let encoding = isText ? 'utf8' : {};
        fs.readFile(thePath, encoding, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    })
        .catch(error);
}
exports.readFile = readFile;
function readTextFile(thePath) {
    return readFile(thePath, true)
        .catch(error);
}
exports.readTextFile = readTextFile;
function readJsonFile(thePath) {
    return readFile(thePath, true)
        .then((data) => (typeof data === 'string') ? JSON.parse(data) : data)
        .catch(error);
}
exports.readJsonFile = readJsonFile;
function writeFile(thePath, content, isText = true) {
    return new Promise((resolve, reject) => {
        var encoding = isText ? 'utf8' : { encoding: null };
        fs.writeFile(thePath, content, encoding, (err) => err ? reject(err) : resolve(thePath));
    })
        .catch(error);
}
exports.writeFile = writeFile;
;
function writeStream(thePath, content) {
    return new Promise((resolve, reject) => {
        let s = fs.createWriteStream(thePath, { flags: 'w', mode: 0o666 });
        s.on('error', (src) => reject(src));
        s.write(content, 'binary', () => resolve(thePath));
        s.end();
    })
        .catch(error);
}
exports.writeStream = writeStream;
function writeTextFile(thePath, content) {
    return writeFile(thePath, content, true)
        .catch(error);
}
exports.writeTextFile = writeTextFile;
;
function writeJsonFile(thePath, obj) {
    return Promise.resolve(obj)
        .then(JSON.stringify)
        .then(data => writeTextFile(thePath, data))
        .catch(error);
}
exports.writeJsonFile = writeJsonFile;
function appendFile(thePath, content, isText = true) {
    return new Promise((resolve, reject) => {
        var encoding = isText ? 'utf8' : { encoding: null };
        fs.appendFile(thePath, content, encoding, (err) => err ? reject(err) : resolve(thePath));
    })
        .then(realPath)
        .catch(error);
}
exports.appendFile = appendFile;
function remove(thePath) {
    return new Promise((resolve, reject) => {
        fs.unlink(thePath, (e) => (e ? reject(e) : resolve(thePath)));
    })
        .catch(error);
}
exports.remove = remove;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZzVXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sRUFBRSxHQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQiw2QkFBNkI7QUF3QzdCLGNBQWMsT0FBYztJQUMzQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUEyQixFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3BFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBTyxFQUFFLEtBQVcsRUFBRSxFQUFFO1lBQ3pDLElBQUcsR0FBRyxFQUFFO2dCQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUFFO2lCQUNuQjtnQkFDSixLQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztnQkFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2Y7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsZUFBZSxPQUFjO0lBQzVCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7U0FDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDaEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFPLEVBQUUsS0FBUyxFQUFFLEVBQUU7WUFDeEMsSUFBRyxHQUFHLEVBQUU7Z0JBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQUU7aUJBQ2hCO2dCQUNQLEtBQUss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