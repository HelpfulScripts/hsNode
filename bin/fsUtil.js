"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const path = require("path");
const hsutil_1 = require("hsutil");
function stat(thePath) {
    return Promise.resolve(thePath)
        .then(realPath)
        .then(thePath => new Promise((resolve, reject) => {
        fs.stat(thePath, (err, stats) => {
            if (err) {
                reject(err);
            }
            else {
                stats.path = thePath;
                resolve(stats);
            }
        });
    }));
}
function lstat(thePath) {
    return Promise.resolve(thePath)
        .then(path.normalize)
        .then(thePath => new Promise((resolve, reject) => {
        fs.lstat(thePath, (err, stats) => {
            if (err) {
                reject(err);
            }
            else {
                stats.path = thePath;
                resolve(stats);
            }
        });
    }));
}
function error(err) {
    const msg = `*** error in fsUtil: ${err}, stack:\n${err.stack}`;
    throw new Error(msg);
}
function realPath(thePath) {
    return new Promise((resolve, reject) => {
        fs.realpath(thePath, (err, resolvedPath) => err ? reject(err) : resolve(resolvedPath));
    })
        .catch(error);
}
exports.realPath = realPath;
function pathExists(thePath) {
    return new Promise((resolve) => {
        stat(thePath).then((stats) => resolve(true)).catch(() => resolve(false));
    });
}
exports.pathExists = pathExists;
function isFile(thePath) {
    return new Promise((resolve) => {
        stat(thePath).then((stats) => resolve(stats.isFile())).catch(() => resolve(false));
    });
}
exports.isFile = isFile;
function isDirectory(thePath) {
    return new Promise((resolve) => {
        stat(thePath).then((stats) => resolve(stats.isDirectory())).catch(() => resolve(false));
    });
}
exports.isDirectory = isDirectory;
function isLink(thePath) {
    return new Promise((resolve) => {
        lstat(thePath).then((stats) => resolve(stats.isSymbolicLink())).catch(() => resolve(false));
    });
}
exports.isLink = isLink;
function mkdirs(thePath) {
    function checkDir(dir) {
        return () => isDirectory(dir)
            .then((exists) => exists ? true :
            new Promise((resolve, reject) => {
                fs.mkdir(dir, (err) => err ? reject(err) : resolve(true));
            }));
    }
    const p = path.normalize(path.resolve(process.cwd(), thePath));
    const i = p.indexOf(process.cwd());
    if (i === 0) {
        const r = path.dirname(p.substr(process.cwd().length + 1));
        let dirs = r.split('/');
        dirs = dirs.map((dir, i) => './' + dirs.slice(0, i + 1).join('/'));
        return hsutil_1.promiseChain(dirs.map(dir => checkDir(dir)))
            .then((results) => {
            results.map((r, i) => {
                if (r) {
                    return true;
                }
                throw `mkdir failed for ${dirs[i]}`;
            });
            return dirs[dirs.length - 1];
        });
    }
    else {
        return Promise.reject(`target '${p}' not inside working directory '${process.cwd()}'`);
    }
}
exports.mkdirs = mkdirs;
function readDir(thePath) {
    return Promise.resolve(thePath)
        .then(realPath)
        .then(thePath => new Promise((resolve, reject) => {
        fs.readdir(thePath, (err, files) => {
            if (err) {
                reject(err);
            }
            else {
                files.path = thePath;
                resolve(files);
            }
        });
    }))
        .catch(error);
}
exports.readDir = readDir;
function readFile(thePath, isText = true) {
    return new Promise((resolve, reject) => {
        let encoding = isText ? 'utf8' : {};
        fs.readFile(thePath, encoding, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    })
        .catch(error);
}
exports.readFile = readFile;
function readTextFile(thePath) {
    return readFile(thePath, true)
        .catch(error);
}
exports.readTextFile = readTextFile;
function readJsonFile(thePath) {
    return readFile(thePath, true)
        .then((data) => (typeof data === 'string') ? JSON.parse(data) : data)
        .catch(error);
}
exports.readJsonFile = readJsonFile;
function writeFile(thePath, content, isText = true) {
    return new Promise((resolve, reject) => {
        var encoding = isText ? 'utf8' : { encoding: null };
        mkdirs(thePath)
            .then(() => fs.writeFile(thePath, content, encoding, (err) => err ? reject(err) : resolve(thePath)));
    })
        .catch(error);
}
exports.writeFile = writeFile;
;
function writeStream(thePath, content) {
    return new Promise((resolve, reject) => {
        let s = fs.createWriteStream(thePath, { flags: 'w', mode: 0o666 });
        s.on('error', (src) => reject(src));
        s.write(content, 'binary', () => resolve(thePath));
        s.end();
    })
        .catch(error);
}
exports.writeStream = writeStream;
function writeTextFile(thePath, content) {
    return writeFile(thePath, content, true)
        .catch(error);
}
exports.writeTextFile = writeTextFile;
;
function writeJsonFile(thePath, obj) {
    return Promise.resolve(obj)
        .then(JSON.stringify)
        .then(data => writeTextFile(thePath, data))
        .catch(error);
}
exports.writeJsonFile = writeJsonFile;
function appendFile(thePath, content, isText = true) {
    return new Promise((resolve, reject) => {
        var encoding = isText ? 'utf8' : { encoding: null };
        fs.appendFile(thePath, content, encoding, (err) => err ? reject(err) : resolve(thePath));
    })
        .then(realPath)
        .catch(error);
}
exports.appendFile = appendFile;
function remove(thePath) {
    return new Promise((resolve, reject) => {
        isDirectory(thePath).then((dir) => {
            dir ? fs.rmdir(thePath, (e) => (e ? reject(e) : resolve(thePath)))
                : fs.unlink(thePath, (e) => (e ? reject(e) : resolve(thePath)));
        });
    })
        .catch(error);
}
exports.remove = remove;
//# sourceMappingURL=data:application/json;base64,