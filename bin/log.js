"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const fsUtil = require("./fsUtil");
const hsutil_1 = require("hsutil");
const path = require("path");
;
const DEBUG = Symbol('DEBUG');
const INFO = Symbol('INFO');
const WARN = Symbol('WARN');
const ERROR = Symbol('ERROR');
const gLevels = {
    [DEBUG]: { importance: 0, sym: DEBUG, desc: 'DEBUG' },
    [INFO]: { importance: 1, sym: INFO, desc: 'INFO' },
    [WARN]: { importance: 2, sym: WARN, desc: 'WARN' },
    [ERROR]: { importance: 3, sym: ERROR, desc: 'ERROR' }
};
let gGlobalLevel = gLevels[INFO];
const defDateFormat = '%YYYY%MM%DD %hh:%mm:%ss.%jjj';
let gDateFormat = defDateFormat;
let gLogFile;
let gColors = true;
const color = {
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[36m',
    green: '\x1b[32m',
    bold: '\x1b[1m',
    clear: '\x1b[0m'
};
class Log {
    constructor(prefix = '') {
        this.gPrefix = '';
        this.DEBUG = DEBUG;
        this.INFO = INFO;
        this.WARN = WARN;
        this.ERROR = ERROR;
        this.prefix(prefix);
    }
    level(newLevelSym, setGlobalLevel = false) {
        let newLevel = gLevels[newLevelSym] || gGlobalLevel;
        let oldLevel = this.gLevel || gGlobalLevel;
        if (newLevelSym === undefined) {
            newLevel = oldLevel;
        }
        else if (newLevelSym === null) {
            this.gLevel = undefined;
        }
        else if (gLevels[newLevelSym]) {
            if (setGlobalLevel) {
                gGlobalLevel = newLevel;
            }
            else {
                this.gLevel = newLevel;
            }
            const msg = `new ${setGlobalLevel ? 'global' : this.gPrefix} log level ${newLevel.desc.toUpperCase()} (was ${oldLevel.desc.toUpperCase()})`;
            this.out((newLevel.sym === oldLevel.sym) ? DEBUG : INFO, msg);
        }
        else {
            this.out(ERROR, `unkown level ${newLevelSym.toString()}; log level remains ${oldLevel.sym.toString()}`);
        }
        return newLevel.sym;
    }
    debug(msg, log = true) { return this.out(DEBUG, msg, log); }
    info(msg, log = true) { return this.out(INFO, msg, log); }
    warn(msg, log = true) { return this.out(WARN, msg, log); }
    error(msg, log = true) { return this.out(ERROR, msg, log); }
    entryFormat(fmtStr) {
        if (fmtStr === null) {
            gDateFormat = defDateFormat;
        }
        else if (fmtStr) {
            gDateFormat = fmtStr;
        }
        return gDateFormat;
    }
    prefix(prf) {
        if (prf) {
            this.gPrefix = prf;
        }
        return this.gPrefix;
    }
    logFile(file) {
        if (file === null) {
            gLogFile = undefined;
            return this.info("disabling logfile");
        }
        else if (file === undefined) {
            return Promise.resolve(hsutil_1.date(gLogFile));
        }
        else if (file.indexOf('/') >= 0) {
            const dir = path.dirname(path.normalize(file));
            return fsUtil.pathExists(dir)
                .then(exists => {
                if (!exists) {
                    gLogFile = undefined;
                    return this.warn(`path '${dir}' doesn't exists; logfile disabled`);
                }
                gLogFile = file;
                return this.info("now logging to file " + hsutil_1.date(file));
            })
                .catch(() => {
                gLogFile = undefined;
                return this.error(`checking path ${dir}; logfile disabled`);
            });
        }
        else if (file === '') {
            file = 'log-%YYYY-%MM-%DD.txt';
        }
        else {
        }
        gLogFile = file;
        return this.info(gLogFile ? `now logging to file ${hsutil_1.date(gLogFile)}` : 'logfile disbaled');
    }
    out(lvl, msg, log = true) {
        const colors = { [ERROR]: color.red + color.bold, [WARN]: color.yellow, [DEBUG]: color.blue, [INFO]: color.green };
        let desc = gLevels[lvl];
        const filterLevel = this.gLevel || gGlobalLevel;
        if (desc.importance >= filterLevel.importance) {
            const dateStr = hsutil_1.date(gDateFormat);
            let line = (typeof msg === 'string') ? msg : this.inspect(msg, 0);
            const logLine = (dateStr + ' ' + this.gPrefix + desc.desc + ' ' + line);
            const colorLine = `${colors[lvl] || ''} ${dateStr} ${this.gPrefix} ${desc.desc} ${color.clear} ${line}`;
            console.log(gColors ? colorLine : logLine);
            if (msg.stack) {
                console.log(msg.stack);
            }
            if (gLogFile && log) {
                const filename = hsutil_1.date(gLogFile);
                return fsUtil.appendFile(filename, logLine + '\n')
                    .catch(e => {
                    console.log(`error appending '${logLine}' to file ${gLogFile} | ${filename}: ${e}`);
                    return logLine;
                });
            }
        }
        return Promise.resolve(undefined);
    }
    inspect(msg, depth = 1) { return util_1.inspect(msg, { depth: depth, colors: gColors }); }
    config(cfg) {
        let colors = true;
        if (cfg.colors !== undefined) {
            gColors = colors = cfg.colors;
        }
        if (cfg.logFile !== undefined) {
            this.logFile(cfg.logFile);
        }
        if (cfg.entryFormat !== undefined) {
            this.entryFormat(cfg.entryFormat);
        }
        if (cfg.level !== undefined) {
            this.level(cfg.level);
        }
    }
}
exports.Log = Log;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQTZEQSwrQkFBZ0M7QUFDaEMsbUNBQW9DO0FBQ3BDLG1DQUFrQztBQUNsQyw2QkFBZ0M7QUFPbUMsQ0FBQztBQUdwRSxNQUFNLEtBQUssR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFHdEMsTUFBTSxJQUFJLEdBQVksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBR3JDLE1BQU0sSUFBSSxHQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUdyQyxNQUFNLEtBQUssR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFJdEMsTUFBTSxPQUFPLEdBQUc7SUFDWixDQUFDLEtBQUssQ0FBQyxFQUFLLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUM7SUFDdEQsQ0FBQyxJQUFJLENBQUMsRUFBTSxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3JELENBQUMsSUFBSSxDQUFDLEVBQU0sRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNyRCxDQUFDLEtBQUssQ0FBQyxFQUFLLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUM7Q0FDekQsQ0FBQztBQUdGLElBQUksWUFBWSxHQUFhLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUczQyxNQUFNLGFBQWEsR0FBRyw4QkFBOEIsQ0FBQztBQUNyRCxJQUFJLFdBQVcsR0FBTyxhQUFhLENBQUM7QUFHcEMsSUFBSSxRQUFnQixDQUFDO0FBR3JCLElBQUksT0FBTyxHQUFHLElBQUksQ0FB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