"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const fsUtil = require("./fsUtil");
const hsutil_1 = require("hsutil");
const path = require("path");
;
const DEBUG = Symbol('DEBUG');
const INFO = Symbol('INFO');
const WARN = Symbol('WARN');
const ERROR = Symbol('ERROR');
const gLevels = {
    [DEBUG]: { importance: 0, sym: DEBUG, desc: 'DEBUG' },
    [INFO]: { importance: 1, sym: INFO, desc: 'INFO' },
    [WARN]: { importance: 2, sym: WARN, desc: 'WARN' },
    [ERROR]: { importance: 3, sym: ERROR, desc: 'ERROR' }
};
let gLevel = gLevels[INFO];
const defDateFormat = '%YYYY%MM%DD %hh:%mm:%ss.%jjj';
let gDateFormat = defDateFormat;
let gLogFile;
let gColors = true;
class Log {
    constructor(prefix = '') {
        this.gPrefix = '';
        this.DEBUG = DEBUG;
        this.INFO = INFO;
        this.WARN = WARN;
        this.ERROR = ERROR;
        this.prefix(prefix);
    }
    level(newLevel) {
        if (newLevel) {
            if (gLevels[newLevel]) {
                let oldLevel = gLevel;
                gLevel = gLevels[newLevel];
                let msg = 'new log level \'' + gLevel.desc.toUpperCase() + '\' (was ' + oldLevel.desc.toUpperCase() + ')';
                this.out((gLevel.sym === oldLevel.sym) ? DEBUG : INFO, msg);
            }
            else {
                this.out(ERROR, "unkown level " + newLevel.toString() + '; log level remains ' + gLevel.sym.toString());
            }
        }
        return gLevel.sym;
    }
    debug(msg, log = true) { return this.out(DEBUG, msg, log); }
    info(msg, log = true) { return this.out(INFO, msg, log); }
    warn(msg, log = true) { return this.out(WARN, msg, log); }
    error(msg, log = true) { return this.out(ERROR, msg, log); }
    entryFormat(fmtStr) {
        if (fmtStr === null) {
            gDateFormat = defDateFormat;
        }
        else if (fmtStr) {
            gDateFormat = fmtStr;
        }
        return gDateFormat;
    }
    prefix(prf = '') {
        this.gPrefix = prf ? prf + ' ' : '';
    }
    logFile(file) {
        if (file === null) {
            gLogFile = undefined;
            return this.info("disabling logfile");
        }
        else if (file === undefined) {
            return Promise.resolve(hsutil_1.date(gLogFile));
        }
        else if (file.indexOf('/') >= 0) {
            const dir = path.dirname(path.normalize(file));
            return fsUtil.pathExists(dir)
                .then(exists => {
                if (!exists) {
                    gLogFile = undefined;
                    return this.warn(`path '${dir}' doesn't exists; logfile disabled`);
                }
                gLogFile = file;
                return this.info("now logging to file " + hsutil_1.date(file));
            })
                .catch(() => {
                gLogFile = undefined;
                return this.error(`checking path ${dir}; logfile disabled`);
            });
        }
        else if (file === '') {
            file = 'log-%YYYY-%MM-%DD.txt';
        }
        else {
        }
        gLogFile = file;
        return this.info(gLogFile ? `now logging to file ${hsutil_1.date(gLogFile)}` : 'logfile disbaled');
    }
    out(lvl, msg, log = true) {
        const color = { [ERROR]: '\x1b[31m', [WARN]: '\x1b[33m', [DEBUG]: '\x1b[36m', [INFO]: '\x1b[32m' };
        let desc = gLevels[lvl];
        if (desc.importance >= gLevel.importance) {
            const dateStr = hsutil_1.date(gDateFormat);
            let line = (typeof msg === 'string') ? msg : this.inspect(msg, 0);
            const logLine = (dateStr + ' ' + this.gPrefix + desc.desc + ' ' + line);
            const colorLine = ((color[lvl] || '') + dateStr + ' ' + this.gPrefix + desc.desc + '\x1b[0m ' + line);
            console.log(gColors ? colorLine : logLine);
            if (msg.stack) {
                console.log(msg.stack);
            }
            if (gLogFile && log) {
                const filename = hsutil_1.date(gLogFile);
                return fsUtil.appendFile(filename, logLine + '\n')
                    .catch(e => {
                    console.log(`error appending '${logLine}' to file ${gLogFile} | ${filename}: ${e}`);
                    return logLine;
                });
            }
        }
        return Promise.resolve(undefined);
    }
    inspect(msg, depth = 1) { return util_1.inspect(msg, { depth: depth, colors: gColors }); }
    config(cfg) {
        let colors = true;
        if (cfg.colors !== undefined) {
            gColors = colors = cfg.colors;
        }
        if (cfg.logFile !== undefined) {
            this.logFile(cfg.logFile);
        }
        if (cfg.entryFormat !== undefined) {
            this.entryFormat(cfg.entryFormat);
        }
        if (cfg.level !== undefined) {
            this.level(cfg.level);
        }
    }
}
exports.Log = Log;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXVEQSwrQkFBZ0M7QUFDaEMsbUNBQW9DO0FBQ3BDLG1DQUFrQztBQUNsQyw2QkFBZ0M7QUFPbUMsQ0FBQztBQUdwRSxNQUFNLEtBQUssR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFHdEMsTUFBTSxJQUFJLEdBQVksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBR3JDLE1BQU0sSUFBSSxHQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUdyQyxNQUFNLEtBQUssR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFJdEMsTUFBTSxPQUFPLEdBQUc7SUFDWixDQUFDLEtBQUssQ0FBQyxFQUFLLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUM7SUFDdEQsQ0FBQyxJQUFJLENBQUMsRUFBTSxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3JELENBQUMsSUFBSSxDQUFDLEVBQU0sRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNyRCxDQUFDLEtBQUssQ0FBQyxFQUFLLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUM7Q0FDekQsQ0FBQztBQUdGLElBQUksTUFBTSxHQUFhLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUdyQyxNQUFNLGFBQWEsR0FBRyw4QkFBOEIsQ0FBQztBQUNyRCxJQUFJLFdBQVcsR0FBTyxhQUFhLENBQUM7QUFHcEMsSUFBSSxRQUFnQixDQUFDO0FBR3JCLElBQUksT0FBTyxHQUFHLElBQUksQ0FB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