{
	"id": 0,
	"name": "hsNode",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"cpUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/cpUtil.ts",
			"comment": {
				"shortText": "Convenience functions for child process access, wrapped in Promises.",
				"text": "### Usage:\n```\nimport { node } from 'hsnode';\nnode.child_process.exec('ls')\n    .then((stdout, stderr) => {...})\n    .catch(err => {...});\n```\n"
			},
			"children": [
				{
					"id": 2,
					"name": "child_process",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 3,
							"name": "exec",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "executes `command` in a child process and promises to return the stdout and stderr streams.\n<pre>\nlet utils = require('./cpUtils');\nutils.exec(cmd)\n.then((stdout, stderr) => {...})\n.catch(err => {...});\n</pre>",
								"returns": "promise to provide the stdout and stderr streams from the child process.\n"
							},
							"signatures": [
								{
									"id": 4,
									"name": "exec",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "executes `command` in a child process and promises to return the stdout and stderr streams.\n<pre>\nlet utils = require('./cpUtils');\nutils.exec(cmd)\n.then((stdout, stderr) => {...})\n.catch(err => {...});\n</pre>",
										"returns": "promise to provide the stdout and stderr streams from the child process.\n"
									},
									"parameters": [
										{
											"id": 5,
											"name": "command",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "the shell command to execute"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "the options to pass along to the shell"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 9,
															"name": "stderr",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "cpUtil.ts",
																	"line": 32,
																	"character": 68
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 8,
															"name": "stdout",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "cpUtil.ts",
																	"line": 32,
																	"character": 56
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																9,
																8
															]
														}
													],
													"sources": [
														{
															"fileName": "cpUtil.ts",
															"line": 32,
															"character": 49
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "cpUtil.ts",
									"line": 32,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "cpUtil.ts",
							"line": 19,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "cpUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 10,
			"name": "\"fsUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/fsUtil.ts",
			"comment": {
				"shortText": "Convenience functions for node file system functions, wrapped in Promises.",
				"text": "### Usage:\n```\nimport { node } from 'hsnode';\nconst files = node.fs.readDir('./');\n    .then((stdout, stderr) => {...})\n    .catch(err => {...});\n```\n"
			},
			"children": [
				{
					"id": 68,
					"name": "appendFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 69,
							"name": "appendFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "appends to a file either as binary or text and promises to return the file name.",
								"returns": "promise to provide the realPath of the file written to.\n"
							},
							"parameters": [
								{
									"id": 70,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 71,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 72,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 327,
							"character": 32
						}
					]
				},
				{
					"id": 17,
					"name": "error",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 18,
							"name": "error",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 19,
									"name": "err",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 90,
							"character": 14
						}
					]
				},
				{
					"id": 29,
					"name": "isDirectory",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 30,
							"name": "isDirectory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` is a directory and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 31,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 142,
							"character": 33
						}
					]
				},
				{
					"id": 26,
					"name": "isFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 27,
							"name": "isFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` is a file and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 28,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 129,
							"character": 28
						}
					]
				},
				{
					"id": 32,
					"name": "isLink",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "isLink",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` is a directory and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 34,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 155,
							"character": 28
						}
					]
				},
				{
					"id": 14,
					"name": "lstat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 15,
							"name": "lstat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a promise for the stats of the file addressed by `thePath`.\nIf `thePath` addresses a symbolic link, the stats of the link are returned."
							},
							"parameters": [
								{
									"id": 16,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Stats"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 83,
							"character": 20
						}
					]
				},
				{
					"id": 35,
					"name": "mkdirs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 36,
							"name": "mkdirs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "creates any missing directories in `thePath` and promises to return the path name.\nCharacters after the last `/` in `thePath` will be interpreted as a filename, hence no directory willbe created form them.\nTerminate `thePath` with a final `/` to indicate that all parts should be created.\nFInally, for precaution `mkdirs` only creates directories within the current working directory.",
								"returns": "promise to provide the path name\n"
							},
							"parameters": [
								{
									"id": 37,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 171,
							"character": 22
						}
					]
				},
				{
					"id": 23,
					"name": "pathExists",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 24,
							"name": "pathExists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` exists and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 25,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 115,
							"character": 32
						}
					]
				},
				{
					"id": 38,
					"name": "readDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 39,
							"name": "readDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "lists all files in a directory and promises to provide the list.",
								"returns": "promise to provide a list of directory entries.\n"
							},
							"parameters": [
								{
									"id": 40,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 213,
							"character": 29
						}
					]
				},
				{
					"id": 41,
					"name": "readFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 42,
							"name": "readFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads a file either as binary or text and promises to provide the content.",
								"returns": "promise to provide file content.\n"
							},
							"parameters": [
								{
									"id": 43,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 44,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 234,
							"character": 24
						}
					]
				},
				{
					"id": 48,
					"name": "readJsonFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 49,
							"name": "readJsonFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads a text file and promises to provide the content.",
								"returns": "promise to provide file content.\n"
							},
							"parameters": [
								{
									"id": 50,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 258,
							"character": 34
						}
					]
				},
				{
					"id": 45,
					"name": "readTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 46,
							"name": "readTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads a text file and promises to provide the content.",
								"returns": "promise to provide file content.\n"
							},
							"parameters": [
								{
									"id": 47,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 248,
							"character": 34
						}
					]
				},
				{
					"id": 20,
					"name": "realPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 21,
							"name": "realPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines the canonical path for `thePath`, resolving all symbolic links and '../'in the path.",
								"returns": "promise to provide the real canonical system path.\n"
							},
							"parameters": [
								{
									"id": 22,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 103,
							"character": 24
						}
					]
				},
				{
					"id": 73,
					"name": "remove",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 74,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "promises to delete a file or folder and return the file or folder name.",
								"returns": "promise to provide the name of the removed file.\n"
							},
							"parameters": [
								{
									"id": 75,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 341,
							"character": 28
						}
					]
				},
				{
					"id": 11,
					"name": "stat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 12,
							"name": "stat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a promise for the stats of the file addressed by `thePath`.\nIf `thePath` addresses a symbolic link, the stats of the linked file are returned."
							},
							"parameters": [
								{
									"id": 13,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Stats"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 65,
							"character": 19
						}
					]
				},
				{
					"id": 51,
					"name": "writeFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 52,
							"name": "writeFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes a file either as binary or text and promises to return the file name.",
								"returns": "promise to provide the file name if successful.\n"
							},
							"parameters": [
								{
									"id": 53,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 54,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 55,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 273,
							"character": 31
						}
					]
				},
				{
					"id": 64,
					"name": "writeJsonFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 65,
							"name": "writeJsonFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes a text file and promises to return the file name.",
								"returns": "promise to provide the file name if successful.\n"
							},
							"parameters": [
								{
									"id": 66,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 67,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 313,
							"character": 35
						}
					]
				},
				{
					"id": 56,
					"name": "writeStream",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "writeStream",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes content to a file as a stream and promises to return the file name.",
								"returns": "promise to provide the file name if successful.\n"
							},
							"parameters": [
								{
									"id": 58,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 59,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 288,
							"character": 33
						}
					]
				},
				{
					"id": 60,
					"name": "writeTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 61,
							"name": "writeTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes a text file and promises to return the file name.",
								"returns": "promise to provide the file name if successful.\n"
							},
							"parameters": [
								{
									"id": 62,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 63,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 302,
							"character": 35
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						68,
						17,
						29,
						26,
						32,
						14,
						35,
						23,
						38,
						41,
						48,
						45,
						20,
						73,
						11,
						51,
						64,
						56,
						60
					]
				}
			],
			"sources": [
				{
					"fileName": "fsUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 85,
			"name": "\"httpUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/httpUtil.ts",
			"comment": {
				"shortText": "# Utility functions for HTTP and HTTPS calls\nConvenience functions for http and https access, wrapped in Promises.\n- &nbsp; {@link httpUtil.request request}: sends a http or https GET or POST request\n- &nbsp; {@link httpUtil.CachedHTTPGet CachedHTTPGet}: used for cached requests",
				"text": "### Usage:\n```\nimport { http } from 'hsnode';\nconst cache = new CachedHTTPRequest('./cacheDir/');\nconst url = new URL('http://mysite.com/');\ncache.request(url);\n```\n"
			},
			"children": [
				{
					"id": 86,
					"name": "CachedHTTPRequest",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Establishes a caching of retrieved sites. The class uses a cache location provided\nduring construction. Each `get` call will return a cache for the site, if available.\nOtherwise, a call to the site is initiated and the result is cached at the specified location.\nAny returned error codes, such as 404 messages, are treated as valid responses and cached\nto be returned future in future calls.",
						"text": "### Usage\n```\nconst cachedGet = new CachedHTTPRequest('./data/cache/');\nconst pageText = await cachedGet.request(url, '');\n```\n"
					},
					"children": [
						{
							"id": 87,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construct a cached get at a specified location int he file system."
							},
							"signatures": [
								{
									"id": 90,
									"name": "new CachedHTTPRequest",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construct a cached get at a specified location int he file system."
									},
									"parameters": [
										{
											"id": 91,
											"name": "cacheLocation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "the location for the cache"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 92,
											"name": "user",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "an optional {@link Digest `Digest`} authentication information\n"
											},
											"type": {
												"type": "reference",
												"name": "Digest",
												"id": 128
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CachedHTTPRequest",
										"id": 86
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 93,
									"character": 32
								}
							]
						},
						{
							"id": 88,
							"name": "cacheLocation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isConstructorProperty": true
							},
							"comment": {
								"shortText": "the location for the cache"
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 99,
									"character": 36
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 89,
							"name": "user",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true,
								"isConstructorProperty": true
							},
							"comment": {
								"shortText": "an optional {@link Digest `Digest`} authentication information\n"
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 99,
									"character": 57
								}
							],
							"type": {
								"type": "reference",
								"name": "Digest",
								"id": 128
							}
						},
						{
							"id": 100,
							"name": "request",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 101,
									"name": "request",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 102,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the URL to request, supports GET and POST"
											},
											"type": {
												"type": "reference",
												"name": "URL"
											}
										},
										{
											"id": 103,
											"name": "useCached",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "optional boolean: if `false`, a call to `request` will ignore\nany cached version of the response\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 123,
									"character": 24
								}
							]
						},
						{
							"id": 97,
							"name": "requestOffline",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 98,
									"name": "requestOffline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 99,
											"name": "fname",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 110,
									"character": 32
								}
							]
						},
						{
							"id": 93,
							"name": "requestOnline",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 94,
									"name": "requestOnline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 95,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "URL"
											}
										},
										{
											"id": 96,
											"name": "fname",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 103,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								87
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								88,
								89
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								100,
								97,
								93
							]
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 93,
							"character": 30
						}
					]
				},
				{
					"id": 128,
					"name": "Digest",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Implements a Digest authentication, used in {@link request `request`} call."
					},
					"children": [
						{
							"id": 132,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 133,
									"name": "new Digest",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 134,
											"name": "username",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 135,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Digest",
										"id": 128
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 167,
									"character": 20
								}
							]
						},
						{
							"id": 129,
							"name": "nc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 165,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 131,
							"name": "password",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 167,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 130,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 166,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 138,
							"name": "generateCNONCE",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 139,
									"name": "generateCNONCE",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse challenge digest"
									},
									"parameters": [
										{
											"id": 140,
											"name": "qop",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 141,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 142,
													"name": "cnonce",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "httpUtil.ts",
															"line": 199,
															"character": 22
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													},
													"defaultValue": " cnonce"
												},
												{
													"id": 143,
													"name": "nc",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "httpUtil.ts",
															"line": 199,
															"character": 34
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": " nc"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														142,
														143
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 189,
									"character": 18
								}
							]
						},
						{
							"id": 144,
							"name": "testDigestAuth",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 145,
									"name": "testDigestAuth",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 146,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 147,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 148,
											"name": "response",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "IncomingMessage",
												"id": 104
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "HttpResponse",
														"id": 124
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 208,
									"character": 18
								}
							]
						},
						{
							"id": 136,
							"name": "updateNC",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 137,
									"name": "updateNC",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update and zero pad nc"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 177,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								132
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								129,
								131,
								130
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								138,
								144,
								136
							]
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 164,
							"character": 19
						}
					]
				},
				{
					"id": 124,
					"name": "HttpResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "general HTTP response structure"
					},
					"children": [
						{
							"id": 127,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 157,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 126,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 156,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 125,
							"name": "response",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 155,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								127,
								126,
								125
							]
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 154,
							"character": 29
						}
					]
				},
				{
					"id": 104,
					"name": "IncomingMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes an incoming message; used in `Digest.testDigestAuth`"
					},
					"children": [
						{
							"id": 123,
							"name": "_headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 148,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 122,
							"name": "caseless",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 147,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 105,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 137,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 106,
							"name": "httpVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 138,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 107,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 139,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 117,
							"name": "on",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 146,
									"character": 6
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 118,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 119,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 120,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 121,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "httpUtil.ts",
											"line": 146,
											"character": 7
										}
									]
								}
							}
						},
						{
							"id": 108,
							"name": "rawHeaders",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 140,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 109,
							"name": "rawTrailers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 141,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 113,
							"name": "setEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 145,
									"character": 15
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 114,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 115,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 116,
													"name": "enc",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "httpUtil.ts",
											"line": 145,
											"character": 16
										}
									]
								}
							}
						},
						{
							"id": 110,
							"name": "statusCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 142,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 111,
							"name": "statusMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 143,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 112,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "httpUtil.ts",
									"line": 144,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								123,
								122,
								105,
								106,
								107,
								117,
								108,
								109,
								113,
								110,
								111,
								112
							]
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 136,
							"character": 32
						}
					]
				},
				{
					"id": 149,
					"name": "log",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 20,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"name": "LogType"
					},
					"defaultValue": " gLog('httpUtil')"
				},
				{
					"id": 163,
					"name": "compileParams",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 164,
							"name": "compileParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compose authorization header"
							},
							"parameters": [
								{
									"id": 165,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 265,
							"character": 22
						}
					]
				},
				{
					"id": 176,
					"name": "getAttributes",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 177,
							"name": "getAttributes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 178,
									"name": "tag",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 179,
									"name": "result",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 305,
							"character": 22
						}
					]
				},
				{
					"id": 173,
					"name": "isBinary",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 174,
							"name": "isBinary",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 175,
									"name": "contentType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 294,
							"character": 17
						}
					]
				},
				{
					"id": 159,
					"name": "omitNull",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 160,
							"name": "omitNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 161,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 162,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 249,
							"character": 17
						}
					]
				},
				{
					"id": 169,
					"name": "parseDigestResponse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 170,
							"name": "parseDigestResponse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 171,
									"name": "digestHeader",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 172,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 284,
							"character": 28
						}
					]
				},
				{
					"id": 166,
					"name": "putDoubleQuotes",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 167,
							"name": "putDoubleQuotes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "return `true` if double quotes are needed for `entry`"
							},
							"parameters": [
								{
									"id": 168,
									"name": "entry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 280,
							"character": 24
						}
					]
				},
				{
					"id": 153,
					"name": "request",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 154,
							"name": "request",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "sends a http or https GET or POST request and promises to return the result.",
								"returns": "promise to provide the result of the request.\n"
							},
							"parameters": [
								{
									"id": 155,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the URL to pass along to the GET or POST request"
									},
									"type": {
										"type": "reference",
										"name": "URL"
									}
								},
								{
									"id": 156,
									"name": "user",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "an optional user {@link Digest Digest}"
									},
									"type": {
										"type": "reference",
										"name": "Digest",
										"id": 128
									}
								},
								{
									"id": 157,
									"name": "referer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 158,
									"name": "postData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "optional data to post. If provided, a POST request will be sent instead of the default GET"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "HttpResponse",
												"id": 124
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 64,
							"character": 23
						}
					]
				},
				{
					"id": 180,
					"name": "requestOptions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 181,
							"name": "requestOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 182,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 183,
									"name": "user",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Digest",
										"id": 128
									}
								},
								{
									"id": 184,
									"name": "postData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "HttpResponse",
												"id": 124
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 321,
							"character": 23
						}
					]
				},
				{
					"id": 150,
					"name": "xml2json",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 151,
							"name": "xml2json",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes an xm or html string into a JSON representation"
							},
							"parameters": [
								{
									"id": 152,
									"name": "xml",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 29,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						86,
						128
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						124,
						104
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						149
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						163,
						176,
						173,
						159,
						169,
						166,
						153,
						180,
						150
					]
				}
			],
			"sources": [
				{
					"fileName": "httpUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 185,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/index.ts",
			"children": [
				{
					"id": 186,
					"name": "node",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 188,
							"name": "child_process",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 7,
									"character": 17
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 189,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 190,
											"name": "exec",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"comment": {
												"shortText": "executes `command` in a child process and promises to return the stdout and stderr streams.\n<pre>\nlet utils = require('./cpUtils');\nutils.exec(cmd)\n.then((stdout, stderr) => {...})\n.catch(err => {...});\n</pre>",
												"returns": "promise to provide the stdout and stderr streams from the child process.\n"
											},
											"signatures": [
												{
													"id": 191,
													"name": "exec",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "executes `command` in a child process and promises to return the stdout and stderr streams.\n<pre>\nlet utils = require('./cpUtils');\nutils.exec(cmd)\n.then((stdout, stderr) => {...})\n.catch(err => {...});\n</pre>",
														"returns": "promise to provide the stdout and stderr streams from the child process.\n"
													},
													"parameters": [
														{
															"id": 192,
															"name": "command",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"shortText": "the shell command to execute"
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 193,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "the options to pass along to the shell"
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Promise",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 194,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 196,
																			"name": "stderr",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "cpUtil.ts",
																					"line": 32,
																					"character": 68
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 195,
																			"name": "stdout",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "cpUtil.ts",
																					"line": 32,
																					"character": 56
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				196,
																				195
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "cpUtil.ts",
																			"line": 32,
																			"character": 49
																		}
																	]
																}
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "cpUtil.ts",
													"line": 32,
													"character": 8
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												190
											]
										}
									]
								}
							},
							"defaultValue": " child_process"
						},
						{
							"id": 187,
							"name": "fs",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 6,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "\"/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/fsUtil\"",
								"id": 10
							},
							"defaultValue": " fs"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								188,
								187
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 5,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						186
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 76,
			"name": "\"log\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/log.ts",
			"comment": {
				"shortText": "Logging convenience functions.\n## Usage\nThis module extends the [hsUtil.log](https://helpfulscripts.github.io/hsUtil/#!/api/hsUtil/hsUtil.log) logging module\nby adding a log file hook.",
				"text": "### Using a log file\n```\nimport { log as gLog } from 'hsnode';\nconst log = gLog('mymodule');  // optional, to use a module specific log; otherwise uses the global instance\nlog.format('%MM%DD');\nlog.info('by the way:'); // -> 0817 info by the way:\nlog.logFile('l%YY%MM');  // -> 0817 info now logging to file l1608.txt\nlog.logFile(null);       // -> 0817 disabling logfile\nlog.error('oh dear!');   // -> 0817 error *** oh dear!\n```\n\n"
			},
			"children": [
				{
					"id": 77,
					"name": "log",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 28,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "LogType"
					},
					"defaultValue": " uLog('', node_logToFile, node_pathExists)"
				},
				{
					"id": 81,
					"name": "node_logToFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 82,
							"name": "node_logToFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 83,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 84,
									"name": "msg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 36,
							"character": 29
						}
					]
				},
				{
					"id": 78,
					"name": "node_pathExists",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 79,
							"name": "node_pathExists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 80,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 31,
							"character": 30
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						77
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						81,
						78
					]
				}
			],
			"sources": [
				{
					"fileName": "log.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 197,
			"name": "\"overview\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/node/hsNode/src/overview.ts",
			"comment": {
				"shortText": "# hsNode",
				"text": "Helpful Scripts functions that wrap some nodejs calls in Promise wrappers.\n[`[Coverage Info]`](./data/src/hsNode/coverage/)\n\n[![npm version](https://badge.fury.io/js/hsnode.svg)](https://badge.fury.io/js/hsnode)\n[![GitHub](https://img.shields.io/badge/GitHub-hsNode-blue.svg)](https://github.com/helpfulscripts/hsnode)\n[![docs](https://img.shields.io/badge/hsDocs-hsNode-blue.svg)](https://helpfulscripts.github.io/hsNode/#!/api/hsNode/0)\n[![Build Status](https://travis-ci.org/HelpfulScripts/hsNode.svg?branch=master)](https://travis-ci.org/HelpfulScripts/hsNode)\n[![Dependencies Status](https://david-dm.org/helpfulscripts/hsnode.svg)](https://david-dm.org/helpfulscripts/hsnode)\n[![Coverage Status](https://coveralls.io/repos/github/HelpfulScripts/hsNode/badge.svg?branch=master)](https://coveralls.io/github/HelpfulScripts/hsNode?branch=master)\n[![Known Vulnerabilities](https://snyk.io/test/github/HelpfulScripts/hsNode/badge.svg?targetFile=package.json)](https://snyk.io/test/github/HelpfulScripts/hsNode?targetFile=package.json)\n[![NPM License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://www.npmjs.com/package/hsnode)\n\n___\n\n## Index of nodejs wrappers\n- &nbsp; {@link cpUtil child_processs} child process execution\n- &nbsp; {@link fsUtil file system} functions:\n- &nbsp; {@link httpUtil http} web server functions\n\n## Index of other node support functions\n- &nbsp; {@link log log} logging support with per-module prefixes\n\n## Accessing the library functions:\n```\nimport * as hsNode from 'hsnode';\nconst log = hsNode.log('myModule');\nconst fs = hsNode.fs;\nconst exec = hsNode.chid_process.exec;\n```\nor access submodules individually:\n```\nimport { node } from 'hsnode';\nconst fs = node.fs\n\nimport { log as gLog } from 'hsnode';\nconst log = gLog('myModule');\nlog.info('running');\n\nimport { http } from 'hsnode';\nconst cache = new CachedHTTPRequest('./cacheDir/');\nconst url = new URL('http://mysite.com/');\ncache.request(url);\n```\n"
			},
			"sources": [
				{
					"fileName": "overview.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				10,
				85,
				185,
				76,
				197
			]
		}
	]
}